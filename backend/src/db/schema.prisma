generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {

  id Int @id @default(autoincrement())
  email String @unique
  password String
  role Role @default(USER)
  name  String?
  isEmailVerified Boolean
  tokens Token[]

  userEnrollment Enrollments[]

}

model Token {
  token String @unique
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  type String
  expires DateTime
  blacklisted Boolean
}

enum Role {
  USER
  ADMIN
}

model Buildings {

  id Int @id @default(autoincrement())
  building_number String
  building_name String
  address String

  rooms Rooms[]
  managers DormManagerAssignments[]

}

model Rooms {

  id Int @id @default(autoincrement())
  building_id Int
  room_number String
  status Int

  building Buildings @relation(fields: [building_id], references: [id])

  assignments RoomAssignments[]
  workOrders WorkOrders[]
  inspections RoomInspections[]

}

model Personnel {

  id Int @id @default(autoincrement())
  rank String
  first_name String
  middle_name String
  last_name String
  phone String
  email String

  userEnrollment Enrollments[]
  roomAssignments RoomAssignments[]
  managerOf DormManagerAssignments[]
  workOrders WorkOrders[]
  workOrderComments WorkOrderComments[]
  roomInspections RoomInspections[] @relation("RoomOccupant")
  conductedInspections RoomInspections[] @relation("RoomInspector")
  createdEvents Events[]
  posts CommonAreaPosts[]
  madeComments CommonAreaPostComments[]
  receivedMessages Messages[] @relation("ReceivedMessages")
  sentMessages Messages[] @relation("SendMessages")
  pendingEnrollments PendingEnrollments[]

}

model Enrollments {

  id Int @id @default(autoincrement())
  user_id Int
  personnel_id Int

  user User @relation(fields: [user_id], references: [id])
  personnel Personnel @relation(fields: [personnel_id], references: [id])

}

model PendingEnrollments {

  id Int @id @default(autoincrement())
  personnel_id Int
  registration_code String @unique

  personnel Personnel @relation(fields: [personnel_id], references: [id])

}

model RoomAssignments {

  id Int @id @default(autoincrement())
  personnel_id Int
  room_id Int

  personnel Personnel @relation(fields: [personnel_id], references: [id])
  room Rooms @relation(fields: [room_id], references: [id])

}

model DormManagerAssignments {

  id Int @id @default(autoincrement())
  personnel_id Int
  building_id Int

  personnel Personnel @relation(fields: [personnel_id], references: [id])
  building Buildings @relation(fields: [building_id], references: [id])

}

model WorkOrders {

  id Int @id @default(autoincrement())
  room_id Int
  subject String
  creator_remarks String
  created_by Int
  created_timestamp DateTime
  status Int
  status_timestamp DateTime

  forRoom Rooms @relation(fields: [room_id], references: [id])
  createdBy Personnel @relation(fields: [created_by], references: [id])
  comments WorkOrderComments[]

}

model WorkOrderComments {

  id Int @id @default(autoincrement())
  work_order_id Int
  personnel_id Int
  timestamp DateTime
  comment String

  workOrder WorkOrders @relation(fields: [work_order_id], references: [id])
  commenter Personnel @relation(fields: [personnel_id], references: [id])

}

model RoomInspections {

  id Int @id @default(autoincrement())
  room_id Int
  resident_id Int
  dorm_manager_id Int
  timestamp DateTime
  inspector_name String
  inspector_remarks String

  room Rooms @relation(fields: [room_id], references: [id])
  roomOccupant Personnel @relation("RoomOccupant", fields: [resident_id], references: [id])
  dormManager Personnel @relation("RoomInspector", fields: [dorm_manager_id], references: [id])

}

model Events {

  id Int @id @default(autoincrement())
  created_by Int
  scheduled DateTime
  location String
  subject String
  description String

  eventCreator Personnel @relation(fields: [created_by], references: [id])

}

model CommonAreaPosts {

  id Int @id @default(autoincrement())
  posted_by Int
  timestamp DateTime
  text String
  comments_enabled Boolean

  poster Personnel @relation(fields: [posted_by], references: [id])
  comments CommonAreaPostComments[]

}

model CommonAreaPostComments {

  id Int @id @default(autoincrement())
  post_id Int
  commenter_id Int
  timestamp DateTime
  text String
  is_visible Boolean

  post CommonAreaPosts @relation(fields: [post_id], references: [id])
  commenter Personnel @relation(fields: [commenter_id], references: [id])

}

model Messages {

  id Int @id @default(autoincrement())
  sender_id Int
  recipient_id Int
  timestamp DateTime
  subject String
  body String

  sender Personnel @relation("SendMessages", fields: [sender_id], references: [id])
  recipient Personnel @relation("ReceivedMessages", fields: [recipient_id], references: [id])

}
